topic,title,description,testCases,starterCode
Arrays,Two Sum,"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to the target.","[{""input"": ""2\n7 11 15\n9"", ""expectedOutput"": ""[0,1]""}, {""input"": ""2\n3 2 4\n6"", ""expectedOutput"": ""[1,2]""}]","function twoSum(nums, target) {
  const map = new Map();
  for (let i = 0; i < nums.length; i++) {
    if (map.has(target - nums[i])) {
      return [map.get(target - nums[i]), i];
    }
    map.set(nums[i], i);
  }
}"
Strings,Longest Palindromic Substring,"Given a string s, return the longest palindromic substring in s.","[{""input"": ""babad"", ""expectedOutput"": ""bab""}, {""input"": ""cbbd"", ""expectedOutput"": ""bb""}]","function longestPalindrome(s) {
  let res = '';
  for (let i = 0; i < s.length; i++) {
    for (let j = i; j < s.length; j++) {
      let substr = s.slice(i, j + 1);
      if (substr === substr.split('').reverse().join('') && substr.length > res.length) {
        res = substr;
      }
    }
  }
  return res;
}"
Trees,Maximum Depth of Binary Tree,"Given the root of a binary tree, return its maximum depth.","[{""input"": ""[3,9,20,null,null,15,7]"", ""expectedOutput"": ""3""}, {""input"": ""[1,null,2]"", ""expectedOutput"": ""2""}]","function maxDepth(root) {
  if (!root) return 0;
  return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
}"
