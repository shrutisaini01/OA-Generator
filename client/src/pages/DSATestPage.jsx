import { useState, useEffect, useRef } from 'react';
import { LogOut, XCircle, ChevronRight, Sun, Moon } from 'lucide-react';
import { useNavigate } from 'react-router-dom';
import Editor from 'react-simple-code-editor';
import { highlight, languages } from 'prismjs';
import 'prismjs/themes/prism-coy.css';
import 'prismjs/components/prism-clike';
import 'prismjs/components/prism-javascript';
import 'prismjs/components/prism-java';
import 'prismjs/components/prism-c';
import 'prismjs/components/prism-cpp';
import 'prismjs/components/prism-python';
import TestLayout from '../components/TestLayout';
import LanguageSelector from '../components/LanguageSelector';
import { runCode } from '../api/codeRunner';
import { saveAssessmentAttempt } from "../utils/progress";


// A simple loading spinner component
const LoadingSpinner = () => (
Â  <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-white"></div>
);

// Map language IDs to Prism.js language names
const languageMap = {
Â  50: 'c',
Â  54: 'cpp',
Â  62: 'java',
Â  63: 'javascript',
Â  71: 'python',
};

// LanguageSelector component remains the same
const LanguageSelectorComponent = ({ onSelect, selectedLanguage }) => {
Â  const languages = [
Â  Â  { id: 71, name: "Python" },
Â  Â  { id: 62, name: "Java" },
Â  Â  { id: 50, name: "C" },
Â  Â  { id: 54, name: "C++" },
Â  Â  { id: 63, name: "JavaScript" },
Â  ];

Â  return (
Â  Â  <div className="inline-block relative">
Â  Â  Â  <select
Â  Â  Â  Â  onChange={(e) => onSelect(parseInt(e.target.value, 10))}
Â  Â  Â  Â  value={selectedLanguage}
Â  Â  Â  Â  className="block appearance-none w-full bg-gray-200 border border-gray-400 text-gray-700 py-3 px-4 pr-8 rounded-lg leading-tight focus:outline-none focus:bg-white focus:border-gray-500 transition-all duration-200"
Â  Â  Â  >
Â  Â  Â  Â  {languages.map((lang) => (
Â  Â  Â  Â  Â  <option key={lang.id} value={lang.id}>
Â  Â  Â  Â  Â  Â  {lang.name}
Â  Â  Â  Â  Â  </option>
Â  Â  Â  Â  ))}
Â  Â  Â  </select>
Â  Â  Â  <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
Â  Â  Â  Â  <ChevronRight size={16} className="transform rotate-90" />
Â  Â  Â  </div>
Â  Â  </div>
Â  );
};

// The main DSA test page component with enhanced UI
const DSATestPage = () => {
Â  const [violation, setViolations] = useState(0);
Â  const [isFullscreen, setIsFullscreen] = useState(!!document.fullscreenElement);
Â  const [questions, setQuestions] = useState([]);
Â  const [index, setIndex] = useState(0);
Â  const [userCode, setUserCode] = useState('');
Â  const [output, setOutput] = useState('');
Â  const [testResults, setTestResults] = useState([]);
Â  const [status, setStatus] = useState('');
Â  const [languageId, setLanguageId] = useState(71);
Â  const [theme, setTheme] = useState('dark');
Â  const [isLoading, setIsLoading] = useState(false);
Â  const [error, setError] = useState('');
Â  const [isLoadingQuestions, setIsLoadingQuestions] = useState(true);
Â  const [showViolationModal, setShowViolationModal] = useState(false);
Â  const [showSubmissionModal, setShowSubmissionModal] = useState(false);
Â  const [testEnded, setTestEnded] = useState(false);
Â  const codeEditorRef = useRef(null);

Â  // Timer state and logic
Â  const [timer, setTimer] = useState(90 * 60);
Â  const [showConfirm, setShowConfirm] = useState(false);
Â  const [isTestStarted, setIsTestStarted] = useState(false); // New state for starting the test

Â  const navigate = useNavigate();

Â  // Function to handle the initial full screen request
Â  const handleStartTest = () => {
Â  Â  const element = document.documentElement;
Â  Â  if (element.requestFullscreen) {
Â  Â  Â  element.requestFullscreen();
Â  Â  } else if (element.webkitRequestFullscreen) {
Â  Â  Â  element.webkitRequestFullscreen();
Â  Â  } else if (element.msRequestFullscreen) {
Â  Â  Â  element.msRequestFullscreen();
Â  Â  }
Â  Â  setIsTestStarted(true);
Â  };

Â  // Effect to load questions on component mount
Â  useEffect(() => {
Â  Â  setIsLoadingQuestions(true);
Â  Â  fetch('http://localhost:5000/api/questions')
Â  Â  Â  .then((res) => {
Â  Â  Â  Â  if (!res.ok) {
Â  Â  Â  Â  Â  throw new Error(`HTTP error! status: ${res.status}`);
Â  Â  Â  Â  }
Â  Â  Â  Â  return res.json();
Â  Â  Â  })
Â  Â  Â  .then((data) => {
Â  Â  Â  Â  setQuestions(data);
Â  Â  Â  Â  if (data.length > 0) {
Â  Â  Â  Â  Â  // Set initial code for the first question
Â  Â  Â  Â  Â  setUserCode(data[0].starterCode || '');
Â  Â  Â  Â  }
Â  Â  Â  Â  setIsLoadingQuestions(false);
Â  Â  Â  })
Â  Â  Â  .catch((err) => {
Â  Â  Â  Â  console.error('Failed to fetch questions!', err);
Â  Â  Â  Â  setError('Failed to load questions. Please check the backend server.');
Â  Â  Â  Â  setIsLoadingQuestions(false);
Â  Â  Â  });
Â  }, []);

Â  // Fullscreen change handler with custom modal
Â  useEffect(() => {
Â  Â  const handleFullScreenChange = () => {
Â  Â  Â  const fullScreenMode = !!document.fullscreenElement;
Â  Â  Â  setIsFullscreen(fullScreenMode);
Â  Â  Â  if (!fullScreenMode && !testEnded && isTestStarted) {
Â  Â  Â  Â  setViolations(prev => prev + 1);
Â  Â  Â  Â  setShowViolationModal(true);
Â  Â  Â  }
Â  Â  };
Â  Â  document.addEventListener('fullscreenchange', handleFullScreenChange);
Â  Â  return () => document.removeEventListener('fullscreenchange', handleFullScreenChange);
Â  }, [testEnded, isTestStarted]);

Â  useEffect(() => {
Â  Â  if (violation >= 3) {
Â  Â  Â  setShowViolationModal(false);
Â  Â  Â  console.log("Test disqualified due to too many fullscreen violations.");
Â  Â  Â  navigate('/disqualified');
Â  Â  Â  setTestEnded(true);
Â  Â  }
Â  }, [violation, navigate]);

Â  // Timer effect
Â  useEffect(() => {
Â  Â  if (testEnded || !isTestStarted) return;
Â  Â  const timeLeft = setInterval(() => {
Â  Â  Â  setTimer((prev) => (prev > 0 ? prev - 1 : 0));
Â  Â  }, 1000);
Â  Â  return () => clearInterval(timeLeft);
Â  }, [testEnded, isTestStarted]);

Â  const timeFormat = (seconds) => {
Â  Â  const h = String(Math.floor(seconds / 3600)).padStart(2, '0');
Â  Â  const m = String(Math.floor((seconds % 3600) / 60)).padStart(2, '0');
Â  Â  const s = String(Math.floor(seconds % 60)).padStart(2, '0');
Â  Â  return `${h}:${m}:${s}`;
Â  };

Â  const question = questions[index];

Â  const handleRunCode = async () => {
Â  Â  try {
Â  Â  Â  setIsLoading(true);
Â  Â  Â  setError('');
Â  Â  Â  setTestResults([]);
Â  Â  Â  setStatus('');
Â  Â  Â  setOutput('');

Â  Â  Â  if (!question) {
Â  Â  Â  Â  setError('No question loaded. Please refresh the page.');
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  if (!question.testCases || question.testCases.length === 0) {
Â  Â  Â  Â  setError('No test cases available for this question.');
Â  Â  Â  Â  return;
Â  Â  Â  }
Â  Â  Â  if (!userCode.trim()) {
Â  Â  Â  Â  setError('Please write some code before running.');
Â  Â  Â  Â  return;
Â  Â  Â  }

Â  Â  Â  console.log('ðŸš€ Running code with:', {
Â  Â  Â  Â  languageId,
Â  Â  Â  Â  testCasesCount: question.testCases.length,
Â  Â  Â  Â  codeLength: userCode.length
Â  Â  Â  });

Â  Â  Â  // The backend runCode function should handle sending the test cases to stdin
Â  Â  Â  const result = await runCode(userCode, question.testCases, languageId);

Â  Â  Â  setTestResults(result.results || []);
Â  Â  Â  setStatus(result.overallStatus || 'No Status');
Â  Â  Â  setOutput(
Â  Â  Â  Â  result.rawOutput ||
Â  Â  Â  Â  result.results?.map((r) => `Input: ${r.input}\nOutput: ${r.actualOutput}`).join('\n\n') ||
Â  Â  Â  Â  'No output'
Â  Â  Â  );
Â  Â  } catch (err) {
Â  Â  Â  console.error('Code execution error:', err);
Â  Â  Â  setTestResults([]);
Â  Â  Â  setStatus('Error running code');
Â  Â  Â  setOutput('Error occurred while executing code');
Â  Â  Â  setError(err.message || 'An error occurred while running your code');
Â  Â  } finally {
Â  Â  Â  setIsLoading(false);
Â  Â  }
Â  };

Â  const handleNextQuestion = () => {
Â  Â  if (index < questions.length - 1) {
Â  Â  Â  setIndex((prev) => prev + 1);
Â  Â  Â  setUserCode(questions[index + 1].starterCode || '');
Â  Â  Â  setTestResults([]);
Â  Â  Â  setStatus('');
Â  Â  Â  setOutput('');
Â  Â  Â  setError('');
Â  Â  }
Â  };

Â  const handlePreviousQuestion = () => {
Â  Â  if (index > 0) {
Â  Â  Â  setIndex((prev) => prev - 1);
Â  Â  Â  setUserCode(questions[index - 1].starterCode || '');
Â  Â  Â  setTestResults([]);
Â  Â  Â  setStatus('');
Â  Â  Â  setOutput('');
Â  Â  Â  setError('');
Â  Â  }
Â  };

Â  const requestFullScreen = () => {
Â  Â  const element = document.documentElement;
Â  Â  if (element.requestFullscreen) element.requestFullscreen();
Â  Â  else if (element.webkitRequestFullscreen) element.webkitRequestFullscreen();
Â  Â  else if (element.msRequestFullscreen) element.msRequestFullscreen();
Â  Â  setShowViolationModal(false);
Â  };

Â  const calculateAndSaveProgress = () => {
Â  Â  // Calculate score based on test results
Â  Â  let correctAnswers = 0;
Â  Â  let totalQuestions = questions.length;
Â  Â Â 
Â  Â  // For each question, check if all test cases passed
Â  Â  questions.forEach((question, questionIndex) => {
Â  Â  Â  // Get test results for this question (this is a simplified approach)
Â  Â  Â  // In a real implementation, you'd need to track results per question
Â  Â  Â  const questionResults = testResults.filter((result, index) => {
Â  Â  Â  Â  // This is a simplified logic - you might need to adjust based on your actual data structure
Â  Â  Â  Â  return result.status === 'Passed';
Â  Â  Â  });
Â  Â  Â Â 
Â  Â  Â  // If all test cases for this question passed, count it as correct
Â  Â  Â  if (questionResults.length > 0) {
Â  Â  Â  Â  correctAnswers++;
Â  Â  Â  }
Â  Â  });
Â  Â Â 
Â  Â  // Save progress
Â  Â  saveAssessmentAttempt('dsa', correctAnswers, totalQuestions);
Â  };

Â  const confirmEndTest = () => {
Â  Â  if (document.fullscreenElement) {
Â  Â  Â  document.exitFullscreen().catch(err => {
Â  Â  Â  Â  console.error("Could not exit fullscreen:", err);
Â  Â  Â  });
Â  Â  }
Â  Â Â 
Â  Â  // Calculate and save progress before ending test
Â  Â  calculateAndSaveProgress();
Â  Â Â 
Â  Â  setTestEnded(true);
Â  Â  setShowConfirm(false);
Â  Â  navigate('/thankyou');
Â  };

Â  const themeClasses = theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-gray-900';
Â  const cardClasses = theme === 'dark' ? 'bg-gray-800 border-gray-700' : 'bg-gray-100 border-gray-300';

Â  if (isLoadingQuestions) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen flex items-center justify-center bg-gray-900 text-white">
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <LoadingSpinner />
Â  Â  Â  Â  Â  <p className="mt-4">Loading questions...</p>
Â  Â  Â  Â  Â  {error && <p className="text-red-400 mt-2">{error}</p>}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  if (questions.length === 0) {
Â  Â  return (
Â  Â  Â  <div className="min-h-screen flex items-center justify-center bg-gray-900 text-white">
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <p className="text-xl mb-4">No questions available</p>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  onClick={() => window.location.reload()}
Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Refresh Page
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }
Â Â 
Â  if (!isTestStarted) {
Â  Â  return (
Â  Â  Â  <div className="fixed inset-0 bg-gray-900 bg-opacity-90 flex items-center justify-center z-[110] p-4">
Â  Â  Â  Â  <div className="bg-white p-8 rounded-2xl shadow-2xl text-center max-w-lg w-full transform scale-100 transition-transform duration-300">
Â  Â  Â  Â  Â  <h1 className="text-4xl font-bold text-gray-800 mb-4">Start Your Test</h1>
Â  Â  Â  Â  Â  <p className="text-lg text-gray-600 mb-6">
Â  Â  Â  Â  Â  Â  To begin, your browser must be in fullscreen mode. Any attempt to exit fullscreen will be recorded as a violation.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  <button onClick={handleStartTest} className="mt-6 px-6 py-3 bg-emerald-600 text-white font-bold rounded-full hover:bg-emerald-700 transition-all duration-300 transform hover:scale-105">
Â  Â  Â  Â  Â  Â  Start Test
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  );
Â  }

Â  const handleKeyDown = (e) => {
Â  Â  // Check for auto-closing brackets and parentheses
Â  Â  const { key, currentTarget } = e;
Â  Â  const { selectionStart, selectionEnd } = currentTarget;

Â  Â  // Autocomplete for braces, parentheses, and brackets
Â  Â  if (key === '{' || key === '(' || key === '[') {
Â  Â  Â  e.preventDefault();
Â  Â  Â  const closingBracket = key === '{' ? '}' : key === '(' ? ')' : ']';
Â  Â  Â  const newValue = userCode.slice(0, selectionStart) + key + closingBracket + userCode.slice(selectionEnd);
Â  Â  Â  setUserCode(newValue);
Â  Â  Â  // Move cursor to the middle
Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  currentTarget.selectionStart = currentTarget.selectionEnd = selectionStart + 1;
Â  Â  Â  }, 0);
Â  Â  }
Â  Â Â 
Â  Â  // Tab key handling for indentation
Â  Â  if (key === 'Tab') {
Â  Â  Â  e.preventDefault();
Â  Â  Â  const tabString = 'Â  Â  '; // 4 spaces
Â  Â  Â  const start = currentTarget.selectionStart;
Â  Â  Â  const end = currentTarget.selectionEnd;
Â  Â  Â Â 
Â  Â  Â  const newCode = userCode.substring(0, start) + tabString + userCode.substring(end);
Â  Â  Â  setUserCode(newCode);
Â  Â  Â Â 
Â  Â  Â  // Move cursor to the correct position after inserting the tab
Â  Â  Â  setTimeout(() => {
Â  Â  Â  Â  currentTarget.selectionStart = currentTarget.selectionEnd = start + tabString.length;
Â  Â  Â  }, 0);
Â  Â  }
Â  };

Â  const codeEditorTheme = theme === 'dark'
Â  Â  ? 'bg-gray-700 text-white'
Â  Â  : 'bg-white text-gray-800';

Â  const highlightedCode = highlight(userCode, languages[languageMap[languageId] || 'clike'], languageMap[languageId] || 'clike');
Â Â 
Â  return (
Â  Â  <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-200 font-inter text-gray-800 relative">
Â  Â  Â  <nav className="bg-white/90 backdrop-blur-md shadow-lg px-6 py-3 flex justify-between items-center sticky top-0 z-50">
Â  Â  Â  Â  <div className="flex items-center gap-4">
Â  Â  Â  Â  Â  <div className="w-10 h-10 rounded-full bg-emerald-500 flex items-center justify-center text-white font-bold text-lg border-2 border-emerald-600">
Â  Â  Â  Â  Â  Â  U
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <span className="font-semibold text-lg text-emerald-900">User</span>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  <span className="text-sm font-medium text-gray-600">Time Left:</span>
Â  Â  Â  Â  Â  <div className="text-xl font-bold bg-emerald-600 text-white rounded-full px-4 py-2 shadow-inner">
Â  Â  Â  Â  Â  Â  {timeFormat(timer)}
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={() => setShowConfirm(true)}
Â  Â  Â  Â  Â  className="flex items-center gap-2 bg-red-500 text-white font-semibold px-6 py-2 rounded-full hover:bg-red-600 transition-all duration-300 transform hover:scale-105 shadow-md"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  <LogOut size={20} /> End Test
Â  Â  Â  Â  </button>
Â  Â  Â  </nav>
Â  Â  Â Â 
Â  Â  Â  <main className={`min-h-screen px-4 py-6 ${themeClasses} transition-colors duration-300`}>
Â  Â  Â  Â  <div className="flex justify-between items-center mb-6">
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <h2 className="text-3xl font-bold">{question.title}</h2>
Â  Â  Â  Â  Â  Â  <p className="text-sm opacity-75">Question {index + 1} of {questions.length}</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  className="p-3 rounded-full bg-indigo-600 hover:bg-indigo-700 text-white font-semibold transition-all duration-300 transform hover:scale-105"
Â  Â  Â  Â  Â  Â  onClick={() => setTheme(prev => prev === 'dark' ? 'light' : 'dark')}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  {theme === 'dark' ? <Sun size={20} /> : <Moon size={20} />}
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
Â  Â  Â  Â  Â  {/* Left Panel: Question Description */}
Â  Â  Â  Â  Â  <div className={`p-6 rounded-xl shadow-lg border ${cardClasses}`}>
Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-semibold mb-3">Problem Description</h3>
Â  Â  Â  Â  Â  Â  <pre className="whitespace-pre-wrap text-sm font-mono leading-snug opacity-90 mb-4">
Â  Â  Â  Â  Â  Â  Â  {question.description}
Â  Â  Â  Â  Â  Â  </pre>
Â  Â  Â  Â  Â  Â  {question.constraints && (
Â  Â  Â  Â  Â  Â  Â  <div className={`p-4 rounded-lg mt-4 border ${cardClasses}`}>
Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="font-semibold text-lg mb-1">Constraints:</h4>
Â  Â  Â  Â  Â  Â  Â  Â  <pre className="text-xs font-mono opacity-80">{question.constraints}</pre>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  {/* Right Panel: Code Editor and Results */}
Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  <div className={`p-6 rounded-xl shadow-lg border mb-6 ${cardClasses}`}>
Â  Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-semibold">Code Editor</h3>
Â  Â  Â  Â  Â  Â  Â  Â  <LanguageSelectorComponent onSelect={setLanguageId} selectedLanguage={languageId} />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  Â  {/* The new code editor component */}
Â  Â  Â  Â  Â  Â  Â  <Editor
Â  Â  Â  Â  Â  Â  Â  Â  value={userCode}
Â  Â  Â  Â  Â  Â  Â  Â  onValueChange={setUserCode}
Â  Â  Â  Â  Â  Â  Â  Â  highlight={code => highlight(code, languages[languageMap[languageId] || 'clike'], languageMap[languageId] || 'clike')}
Â  Â  Â  Â  Â  Â  Â  Â  onKeyDown={handleKeyDown} // Custom keydown handler for autocompletion
Â  Â  Â  Â  Â  Â  Â  Â  padding={15}
Â  Â  Â  Â  Â  Â  Â  Â  style={{
Â  Â  Â  Â  Â  Â  Â  Â  Â  boxSizing: 'border-box',
Â  Â  Â  Â  Â  Â  Â  Â  Â  fontFamily: 'monospace',
Â  Â  Â  Â  Â  Â  Â  Â  Â  fontSize: 12,
Â  Â  Â  Â  Â  Â  Â  Â  Â  backgroundColor: theme === 'dark' ? '#1f2937' : '#ffffff',
Â  Â  Â  Â  Â  Â  Â  Â  Â  color: theme === 'dark' ? '#e5e7eb' : '#1f2937',
Â  Â  Â  Â  Â  Â  Â  Â  Â  borderRadius: '0.5rem',
Â  Â  Â  Â  Â  Â  Â  Â  Â  minHeight: '256px',
Â  Â  Â  Â  Â  Â  Â  Â  Â  lineHeight: '1.5em',
Â  Â  Â  Â  Â  Â  Â  Â  Â  overflow: 'auto',
Â  Â  Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â Â 
Â  Â  Â  Â  Â  Â  <div className="flex justify-between items-center mb-6">
Â  Â  Â  Â  Â  Â  Â  <div className="flex space-x-2">
Â  Â  Â  Â  Â  Â  Â  Â  {index > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handlePreviousQuestion}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-4 py-2 bg-gray-600 text-white rounded-lg shadow-md hover:bg-gray-700 transition-colors duration-200"
Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Previous
Â  Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleRunCode}
Â  Â  Â  Â  Â  Â  Â  Â  Â  disabled={isLoading}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`px-6 py-2 rounded-lg shadow-md text-white font-bold transition-all duration-200 ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  isLoading
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-gray-500 cursor-not-allowed'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-green-600 hover:bg-green-700 transform hover:scale-105'
Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  {isLoading ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <LoadingSpinner />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Running...
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  ) : 'Run Code'}
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {index < questions.length - 1 ? (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={handleNextQuestion}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-6 py-2 bg-blue-600 text-white rounded-lg shadow-md hover:bg-blue-700 transition-colors duration-200 transform hover:scale-105"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Next Question
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowSubmissionModal(true)}
Â  Â  Â  Â  Â  Â  Â  Â  Â  className="px-6 py-2 bg-green-700 text-white rounded-lg shadow-md hover:bg-green-800 transition-colors duration-200 transform hover:scale-105"
Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Submit Test
Â  Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  {/* Results and Output section */}
Â  Â  Â  Â  Â  Â  {(error || status || testResults.length > 0 || output) && (
Â  Â  Â  Â  Â  Â  Â  <div className={`p-6 rounded-xl shadow-lg border ${cardClasses} mt-6`}>
Â  Â  Â  Â  Â  Â  Â  Â  {error && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="p-3 rounded-lg bg-red-100 border border-red-400 text-red-700 font-semibold mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p>Error: {error}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  {status && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-semibold text-lg mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Overall Status: <span className={status === 'Passed All' ? 'text-green-500' : 'text-red-500'}>{status}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  {testResults.length > 0 && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="space-y-4 mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-semibold">Test Case Results:</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {testResults.map((result, i) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  key={i}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className={`p-4 rounded-lg shadow border text-sm font-mono ${
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  result.status === 'Passed'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ? 'bg-green-50 border-green-400 text-green-800'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  : 'bg-red-50 border-red-400 text-red-800'
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  }`}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Input:</strong> {result.input}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Expected:</strong> {result.expectedOutput}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p><strong>Output:</strong> {result.actualOutput}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="font-semibold mt-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Status: <span className={result.status === 'Passed' ? 'text-green-700' : 'text-red-700'}>{result.status}</span>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  {output && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h3 className="text-xl font-semibold mb-2">Raw Output:</h3>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <pre className="bg-black text-green-400 p-4 rounded shadow text-sm whitespace-pre-wrap overflow-x-auto">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {output}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </pre>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </main>

Â  Â  {/* Fullscreen Violation Modal */}
Â  Â  {showViolationModal && !testEnded && (
Â  Â  Â  <div className="fixed inset-0 bg-gray-900 bg-opacity-70 flex items-center justify-center z-[100] p-4">
Â  Â  Â  Â  <div className="bg-white p-8 rounded-2xl shadow-2xl text-center max-w-sm w-full transform scale-100 transition-transform duration-300">
Â  Â  Â  Â  Â  <div className="flex justify-end -mt-4 -mr-4">
Â  Â  Â  Â  Â  Â  <button onClick={() => setShowViolationModal(false)} className="text-gray-400 hover:text-gray-600 transition">
Â  Â  Â  Â  Â  Â  Â  <XCircle size={24} />
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <p className="mb-6 font-semibold text-xl text-gray-800">
Â  Â  Â  Â  Â  You exited fullscreen!
Â  Â  Â  Â  </p>
Â  Â  Â  Â  <p className="text-sm text-gray-600 mb-6">
Â  Â  Â  Â  Â  Violation count: <span className="font-bold text-red-500">{violation}</span> / 3
Â  Â  Â  Â  Â  <br />
Â  Â  Â  Â  Â  Please re-enter fullscreen to continue your test.
Â  Â  Â  Â  </p>
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  className="bg-green-600 text-white font-bold px-6 py-3 rounded-full hover:bg-green-700 transition-all duration-300 shadow-lg"
Â  Â  Â  Â  Â  onClick={requestFullScreen}
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Re-enter Full Screen
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  )}

Â  Â  {/* Submission Confirmation Modal */}
Â  Â  {showSubmissionModal && (
Â  Â  Â  <div className="fixed inset-0 bg-gray-900 bg-opacity-70 flex items-center justify-center z-[100] p-4">
Â  Â  Â  Â  <div className="bg-white p-8 rounded-2xl shadow-2xl text-center max-w-sm w-full transform scale-100 transition-transform duration-300">
Â  Â  Â  Â  Â  <div className="flex justify-end -mt-4 -mr-4">
Â  Â  Â  Â  Â  Â  <button onClick={() => setShowSubmissionModal(false)} className="text-gray-400 hover:text-gray-600 transition">
Â  Â  Â  Â  Â  Â  Â  <XCircle size={24} />
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <p className="mb-6 font-semibold text-xl text-gray-800">
Â  Â  Â  Â  Â  Are you sure you want to submit your test?
Â  Â  Â  Â  </p>
Â  Â  Â  Â  <p className="text-sm text-gray-600 mb-6">
Â  Â  Â  Â  Â  Once submitted, you cannot make any more changes.
Â  Â  Â  Â  </p>
Â  Â  Â  Â  <div className="flex justify-center gap-4">
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  className="bg-green-600 text-white font-bold px-6 py-3 rounded-full hover:bg-green-700 transition-all duration-300 shadow-lg"
Â  Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  Â  setShowSubmissionModal(false);
Â  Â  Â  Â  Â  Â  Â  calculateAndSaveProgress();
Â  Â  Â  Â  Â  Â  Â  setTestEnded(true);
Â  Â  Â  Â  Â  Â  Â  console.log("Test submitted.");
Â  Â  Â  Â  Â  Â  Â  navigate('/thankyou');
Â  Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Yes, Submit
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  className="bg-gray-200 text-gray-800 font-bold px-6 py-3 rounded-full hover:bg-gray-300 transition-all duration-300 shadow-md"
Â  Â  Â  Â  Â  Â  onClick={() => setShowSubmissionModal(false)}
Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  )}
Â  Â Â 
Â  Â  {/* End Test and Disqualified Modal */}
Â  Â  {showConfirm && (
Â  Â  Â  <div className="fixed inset-0 bg-gray-900 bg-opacity-70 flex items-center justify-center z-[100] p-4">
Â  Â  Â  Â  <div className="bg-white p-8 rounded-2xl shadow-2xl text-center max-w-sm w-full">
Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold mb-4">Confirm End Test</h2>
Â  Â  Â  Â  Â  <p className="text-gray-600 mb-6">
Â  Â  Â  Â  Â  Â  Are you sure you want to end the test? This action cannot be undone.
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  <div className="flex justify-center gap-4">
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  className="bg-red-500 text-white font-bold px-6 py-3 rounded-full hover:bg-red-600 transition-all duration-300"
Â  Â  Â  Â  Â  Â  Â  onClick={confirmEndTest}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  End Test
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  Â  Â  className="bg-gray-200 text-gray-800 font-bold px-6 py-3 rounded-full hover:bg-gray-300 transition-all duration-300"
Â  Â  Â  Â  Â  Â  Â  onClick={() => setShowConfirm(false)}
Â  Â  Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Â  Â  Cancel
Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  )}
Â  Â Â 
Â  Â  {testEnded && (
Â  Â  Â  <div className="fixed inset-0 bg-gray-900 bg-opacity-90 flex items-center justify-center z-[110] p-4">
Â  Â  Â  Â  <div className="bg-white p-8 rounded-2xl shadow-2xl text-center max-w-lg w-full transform scale-100 transition-transform duration-300">
Â  Â  Â  Â  Â  {violation >= 3 ? (
Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  <h1 className="text-4xl font-bold text-red-500 mb-4">Test Disqualified</h1>
Â  Â  Â  Â  Â  Â  Â  <p className="text-lg">You have exceeded the maximum number of fullscreen violations. Your test has been automatically submitted.</p>
Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  <h1 className="text-4xl font-bold text-emerald-500 mb-4">Thank You!</h1>
Â  Â  Â  Â  Â  Â  Â  <p className="text-lg">Your test has been successfully submitted.</p>
Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  <button onClick={() => navigate('/')} className="mt-6 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700">
Â  Â  Â  Â  Â  Â  Go to Home
Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  )}
Â  </div>
Â  );
};

export default DSATestPage;